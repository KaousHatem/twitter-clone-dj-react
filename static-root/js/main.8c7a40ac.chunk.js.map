{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetComponent","props","useState","newTweets","setNewTweets","textAreaRef","React","createRef","className","onSubmit","event","preventDefault","newValue","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","console","log","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLiked","setUserLiked","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","tweetEl","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8c7a40ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React, {useEffect, useState} from 'react';\nimport {loadTweets} from '../lookup'\n\nexport function TweetComponent(props) {\n  const [newTweets, setNewTweets] = useState([])\n  const textAreaRef = React.createRef() \n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newValue = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newValue,\n      likes: 0,\n      id:3456\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className}> \n    <div className=\"col-12 mb-3\">\n      <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} required={true} className=\"form-control\" name=\"tweet\" id=\"\">\n          \n        </textarea>\n        <button type=\"submit\" className=\"btn btn-primary my-3\" >Tweet</button>    \n      </form>\n    </div>\n    <TweetsList newTweets={newTweets} />\n  </div>\n}\n\n\n\nexport function TweetsList(props){\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n\n  useEffect(() => {\n\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length){\n      setTweets(final)\n      console.log(final)\n    }\n  },[props.newTweets,tweets,tweetsInit])\n\n  useEffect(() => {\n    // do my lookup\n    const myCallBack = (response,status) => {\n      if (status === 200){\n        setTweetsInit(response)\n      }\n      \n    }\n    loadTweets(myCallBack)\n  }, [])\n\n  return tweets.map((item,index) =>{\n    return <Tweet tweet={item} key={`${index}-{item.id}`} className=\"my-5 py-5 border bg-white text-dark\"/>\n  })\n}\n\nexport function ActionBtn(props) {\n  const {tweet, action} = props\n  const [likes,setLikes] = useState(tweet.likes ? tweet.likes : 0)\n  const [userLiked, setUserLiked] = useState(false)\n  const className = props.className ? props.className : 'btn btn-primary'\n  const actionDisplay = action.display ? action.display : 'Action'\n  \n  const handleClick = (event) => {\n  \tevent.preventDefault()\n  \tif (action.type === 'like'){\n  \t\tif (userLiked === true){\n  \t\t\tsetUserLiked(false)\n  \t\t\tsetLikes(likes - 1)\n  \t\t}else {\n  \t\t\tsetUserLiked(true)\n  \t\t\tsetLikes(tweet.likes + 1)\n  \t\t}\n  \t\t\n  \t}\n  }\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n  return <button className={className} onClick={handleClick}>{display}</button>\n\n}\n\nexport function Tweet(props) {\n  const {tweet} = props\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n  return <div className={className}>\n    <p>{tweet.id} - {tweet.content}</p>\n    <div className='btn btn-group'>\n      <ActionBtn tweet={tweet} action={{type:\"like\",display:\"Likes\"}}/>\n      <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}}/>\n      <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}}/>\n    </div>\n  </div>\n}\n","\nexport function loadTweets(callback){\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n        callback(xhr.response,xhr.status)\n    }\n\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\":\"The request was an error\"},400)\n    }\n    xhr.send()\n\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetComponent} from './tweets'\n\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponent />\n        </div> \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\n\nconst appEl = document.getElementById('root')\n\nconst tweetEl = document.getElementById('tweet-row')\nif (appEl){\n  ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  appEl\n  );\n}\n\nif (tweetEl){\n   ReactDOM.render(\n  <React.StrictMode>\n    <TweetComponent />\n  </React.StrictMode>,\n  tweetEl\n  );\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}